#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "integration.h"
#include <gtk/gtk.h>

enum{
	EIDEL,
	EMUNIC,
	EGOV,
	ETYPE,
	ENOMBREBV,
	ENBH,
	ECONS,
	EDATEEL,
	ECOLUMNSSS,
};

enum{
	EID,
	ENOM,
	EORIENTATION,
	ENOMCT,
	ECINT,
	ENUMTEL,
	ECINC1,
	EGENREC1,
	ECINC2,
	EGENREC2,
	ECINC3,
	EGENREC3,
	ENBVOTE,
	EDATE,
	ECOLUMNS,
};

 enum{
	EIDS,
	ENOMS,
	ENBVOTES,
	ECOLUMNSS,
};



void ajouter_election(election e){
	FILE *f;
	f = fopen("election.txt","a");
        if(f!= NULL){
        	fprintf(f,"%s %s %s %s %d %d %d/%d/%d\n",e.id,e.municipalite,e.gov,e.type,e.nombreBV,e.nbHabitants,e.d.j,e.d.m,e.d.a);
    	}
    	fclose(f);
}

void modifier_election(election e){
	election y;
	FILE *f, *g;
	f=fopen("election.txt","r");
	g=fopen("temp.txt","a");
	if(f!=NULL&&g!=NULL){
		while(fscanf(f,"%s %s %s %s %d %d %d/%d/%d\n",y.id,y.municipalite,y.gov,y.type,&(y.nombreBV),&(y.nbHabitants),&(y.d.j),&(y.d.m),&(y.d.a))!=EOF)
		{
			if(strcmp(e.id,y.id) != 0)
				fprintf(g,"%s %s %s %s %d %d %d/%d/%d\n",y.id,y.municipalite,y.gov,y.type,y.nombreBV,y.nbHabitants,y.d.j,y.d.m,y.d.a);
			else
				fprintf(g,"%s %s %s %s %d %d %d/%d/%d\n",e.id,e.municipalite,e.gov,e.type,e.nombreBV,e.nbHabitants,e.d.j,e.d.m,e.d.a);
		}
	
		fclose(f);
		fclose(g);
		
		remove("election.txt");
		rename("temp.txt","election.txt");
	}
}


void supprimer_election(char id[]){

	election e;
	FILE *f, *g;
	f=fopen("election.txt","r");
	g=fopen("temp.txt","a");
	if(f!=NULL&&g!=NULL){
		while(fscanf(f,"%s %s %s %s %d %d %d/%d/%d\n",e.id,e.municipalite,e.gov,e.type,&(e.nombreBV),&(e.nbHabitants),&(e.d.j),&(e.d.m),&(e.d.a))!=EOF)
		{
			if(strcmp(e.id,id) != 0)
				fprintf(g,"%s %s %s %s %d %d %d/%d/%d\n",e.id,e.municipalite,e.gov,e.type,e.nombreBV,e.nbHabitants,e.d.j,e.d.m,e.d.a);
		}
	
		fclose(f);
		fclose(g);
		
		remove("election.txt");
		rename("temp.txt","election.txt");
	}
}


void afficher_election(GtkWidget *liste){

    GtkCellRenderer *renderer;
    GtkTreeViewColumn *column;
    GtkTreeIter iter;
    GtkListStore *store;
    election e ;

    char nombreB[40];
    char nombreH[50];
    char date[50];
    char nbrConseillers[40];
    FILE *f;
    store = NULL;
    store = gtk_tree_view_get_model(liste);


    if(store == NULL){
        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("ID",renderer,"text",EIDEL,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Municipalité",renderer,"text",EMUNIC,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Governorat",renderer,"text",EGOV,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Type d'élection",renderer,"text",ETYPE,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Nombre B_Votes",renderer,"text",ENOMBREBV,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Nombre d'Habitants",renderer,"text",ENBH,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Nombre de conseillers",renderer,"text",ECONS,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Date ",renderer,"text",EDATEEL,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);



    }
	store = gtk_list_store_new(ECOLUMNSSS,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING);
    
    
    	f = fopen("election.txt","r");
	if(f == NULL){
        	return;
    	}
	else{
        	while(fscanf(f,"%s %s %s %s %d %d %d/%d/%d\n",e.id,e.municipalite,e.gov,e.type,&(e.nombreBV),&(e.nbHabitants),&(e.d.j),&(e.d.m),&(e.d.a))!=EOF){
			sprintf(date,"%d/%d/%d",e.d.j,e.d.m,e.d.a);
			sprintf(nombreH,"%d",e.nbHabitants);
			sprintf(nombreB,"%d",e.nombreBV);
			sprintf(nbrConseillers,"%d",nb_conseillers(e));

			          		
			gtk_list_store_append(store,&iter);
            		gtk_list_store_set(store,&iter,EIDEL,e.id,EMUNIC,e.municipalite,EGOV,e.gov,ETYPE,e.type,ENOMBREBV,nombreB,ENBH,nombreH,ECONS,nbrConseillers,EDATEEL,date,-1);
            		
        	}
		gtk_tree_view_set_model(GTK_TREE_VIEW(liste),GTK_TREE_MODEL(store));
		g_object_unref(store);
        	fclose(f);
    	}


}

int rechercher_election(char id[]){
	election e ;
	FILE *f;
	f = fopen("election.txt","r");

	if(f!= NULL){
        	while(fscanf(f,"%s %s %s %s %d %d %d/%d/%d\n",e.id,e.municipalite,e.gov,e.type,&(e.nombreBV),&(e.nbHabitants),&(e.d.j),&(e.d.m),&(e.d.a))!=EOF)
		{
			if(strcmp(e.id,id) == 0)
				return 1;
		}
    	}
    	fclose(f);
	return 0;
}

election trouver_election(char id[]){

	election e ;
	FILE *f;
	f = fopen("election.txt","r");

	if(f!= NULL){
        	while(fscanf(f,"%s %s %s %s %d %d %d/%d/%d\n",e.id,e.municipalite,e.gov,e.type,&(e.nombreBV),&(e.nbHabitants),&(e.d.j),&(e.d.m),&(e.d.a))!=EOF)
		{
			if(strcmp(e.id,id) == 0)
				return e;
		}
    	}
    	fclose(f);
	return;
}

int nb_conseillers (election e)

{

	if ((e.nbHabitants)<5000)

	    return 10;

	else if (((e.nbHabitants)>5000)&&((e.nbHabitants)<10000))

	    return 12;

	else if ((e.nbHabitants>10000)&&(e.nbHabitants<25000))

	    return 16;

	else if ((e.nbHabitants>25000)&& (e.nbHabitants<50000))

	    return 22;

	else if ((e.nbHabitants>50000)&& (e.nbHabitants<100000))

	    return 30;

	else if ((e.nbHabitants>100000)&& (e.nbHabitants<500000))

	    return 40;

	else

	    return 60;



	return 0;

}





void ajouter(Lelectoral e){
    e.nbrVote = 0 ;
    FILE *f;
    f = fopen("listeE.txt","a");
    if(f!= NULL){
        fprintf(f,"%s %s %s %s %s %s %s %s %s %s %s %s %d %d/%d/%d\n",e.id,e.nom,e.orientation,e.nomCT,e.cinT,e.num_tel,e.tab_cand[0].cin,e.tab_cand[0].genre,e.tab_cand[1].cin,e.tab_cand[1].genre,e.tab_cand[2].cin,e.tab_cand[2].genre,e.nbrVote,e.d.j,e.d.m,e.d.a);
    }
    fclose(f);
}


void supprimer(char id[]){
	Lelectoral e;
	FILE *f, *g;
	f=fopen("listeE.txt","r");
	g=fopen("temp.txt","a");
	if(f!=NULL&&g!=NULL){
		while(fscanf(f,"%s %s %s %s %s %s %s %s %s %s %s %s %d %d/%d/%d\n",e.id,e.nom,e.orientation,e.nomCT,e.cinT,e.num_tel,e.tab_cand[0].cin,e.tab_cand[0].genre,e.tab_cand[1].cin,e.tab_cand[1].genre,e.tab_cand[2].cin,e.tab_cand[2].genre,&(e.nbrVote),&(e.d.j),&(e.d.m),&(e.d.a))!=EOF)
		{
			if(strcmp(e.id,id) != 0)
				fprintf(g,"%s %s %s %s %s %s %s %s %s %s %s %s %d %d/%d/%d\n",e.id,e.nom,e.orientation,e.nomCT,e.cinT,e.num_tel,e.tab_cand[0].cin,e.tab_cand[0].genre,e.tab_cand[1].cin,e.tab_cand[1].genre,e.tab_cand[2].cin,e.tab_cand[2].genre,e.nbrVote,e.d.j,e.d.m,e.d.a);
		}
		
		fclose(f);
		fclose(g);
		
		remove("listeE.txt");
		rename("temp.txt","listeE.txt");
		}
}
void modifier_listeE(Lelectoral el){
	Lelectoral e;
	FILE *f, *g;
	f=fopen("listeE.txt","r");
	g=fopen("temp.txt","a");
	if(f!=NULL&&g!=NULL){
		while(fscanf(f,"%s %s %s %s %s %s %s %s %s %s %s %s %d %d/%d/%d\n",e.id,e.nom,e.orientation,e.nomCT,e.cinT,e.num_tel,e.tab_cand[0].cin,e.tab_cand[0].genre,e.tab_cand[1].cin,e.tab_cand[1].genre,e.tab_cand[2].cin,e.tab_cand[2].genre,&(e.nbrVote),&(e.d.j),&(e.d.m),&(e.d.a))!=EOF)
		{
			if(strcmp(e.id,el.id) != 0){
				fprintf(g,"%s %s %s %s %s %s %s %s %s %s %s %s %d %d/%d/%d\n",e.id,e.nom,e.orientation,e.nomCT,e.cinT,e.num_tel,e.tab_cand[0].cin,e.tab_cand[0].genre,e.tab_cand[1].cin,e.tab_cand[1].genre,e.tab_cand[2].cin,e.tab_cand[2].genre,e.nbrVote,e.d.j,e.d.m,e.d.a);
			}else{
				fprintf(g,"%s %s %s %s %s %s %s %s %s %s %s %s %d %d/%d/%d\n",el.id,el.nom,el.orientation,el.nomCT,el.cinT,el.num_tel,el.tab_cand[0].cin,el.tab_cand[0].genre,el.tab_cand[1].cin,el.tab_cand[1].genre,el.tab_cand[2].cin,el.tab_cand[2].genre,el.nbrVote,el.d.j,el.d.m,el.d.a);
			}
		}
		
		fclose(f);
		fclose(g);
		
		remove("listeE.txt");
		rename("temp.txt","listeE.txt");
		}
}

/* ----------------------------------------------------------------------------------------- */

int rechercher_listeE(char id[]){
    Lelectoral e;
    FILE *f;
    f = fopen("listeE.txt","r");
    if(f != NULL){
    	while(fscanf(f,"%s %s %s %s %s %s %s %s %s %s %s %s %d %d/%d/%d\n",e.id,e.nom,e.orientation,e.nomCT,e.cinT,e.num_tel,e.tab_cand[0].cin,e.tab_cand[0].genre,e.tab_cand[1].cin,e.tab_cand[1].genre,e.tab_cand[2].cin,e.tab_cand[2].genre,&(e.nbrVote),&(e.d.j),&(e.d.m),&(e.d.a))!=EOF){
        	if(strcmp(e.id,id) == 0){
       		     return 1;
        	}
    	}
}
    fclose(f);
    return 0;
    

}

/* ----------------------------------------------------------------------------------------- */

Lelectoral recherche_listeE(char id[]){
    Lelectoral e;
    FILE *f;
    f = fopen("listeE.txt","r");
    if(f != NULL){
    	while(fscanf(f,"%s %s %s %s %s %s %s %s %s %s %s %s %d %d/%d/%d\n",e.id,e.nom,e.orientation,e.nomCT,e.cinT,e.num_tel,e.tab_cand[0].cin,e.tab_cand[0].genre,e.tab_cand[1].cin,e.tab_cand[1].genre,e.tab_cand[2].cin,e.tab_cand[2].genre,&(e.nbrVote),&(e.d.j),&(e.d.m),&(e.d.a))!=EOF){
        	if(strcmp(e.id,id) == 0){
       		     return e;
        	}
    	}
}
    fclose(f);
    return;
}

/* ----------------------------------------------------------------------------------------- */

void afficher_listeE(GtkWidget *liste,char *fname){
    
  GtkCellRenderer *renderer;
    GtkTreeViewColumn *column;
    GtkTreeIter iter;
    GtkListStore *store;
    Lelectoral e ;
    char nb[20];
	char dateFormat[100];
    FILE *f;
    store = NULL;
    store = gtk_tree_view_get_model(liste);


    if(store == NULL){
        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("ID",renderer,"text",EID,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Nom LE",renderer,"text",ENOM,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Orientation",renderer,"text",EORIENTATION,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);


	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Nom Tête Liste",renderer,"text",ENOMCT,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("N° Cin",renderer,"text",ECINT,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Numero Tel",renderer,"text",ENUMTEL,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("N° Cin C1",renderer,"text",ECINC1,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Genre C1",renderer,"text",EGENREC1,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

		renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("N° Cin C2",renderer,"text",ECINC2,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Genre C2",renderer,"text",EGENREC2,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("N° Cin C3",renderer,"text",ECINC3,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Genre C3",renderer,"text",EGENREC3,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);


	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Nombre Vote",renderer,"text",ENBVOTE,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);


	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Date",renderer,"text",EDATE,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);


    }
	store = gtk_list_store_new(ECOLUMNS,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING);
    
    
    	f = fopen(fname,"r");
	if(f == NULL){
        	return;
    	}
	else{
        	while(fscanf(f,"%s %s %s %s %s %s %s %s %s %s %s %s %d %d/%d/%d\n",e.id,e.nom,e.orientation,e.nomCT,e.cinT,e.num_tel,e.tab_cand[0].cin,e.tab_cand[0].genre,e.tab_cand[1].cin,e.tab_cand[1].genre,e.tab_cand[2].cin,e.tab_cand[2].genre,&(e.nbrVote),&(e.d.j),&(e.d.m),&(e.d.a))!=EOF){
			sprintf(nb,"%d",e.nbrVote);
			sprintf(dateFormat,"%d/%d/%d",e.d.j,e.d.m,e.d.a);
			          		
			gtk_list_store_append(store,&iter);
            		gtk_list_store_set(store,&iter,EID,e.id,ENOM,e.nom,EORIENTATION,e.orientation,ENOMCT,e.nomCT,ECINT,e.cinT,ENUMTEL,e.num_tel,ECINC1,e.tab_cand[0].cin,EGENREC1,e.tab_cand[0].genre,ECINC2,e.tab_cand[1].cin,EGENREC2,e.tab_cand[1].genre,ECINC3,e.tab_cand[2].cin,EGENREC3,e.tab_cand[2].genre,ENBVOTE,nb,EDATE,dateFormat,-1);
            		
        	}
		gtk_tree_view_set_model(GTK_TREE_VIEW(liste),GTK_TREE_MODEL(store));
		g_object_unref(store);
        	fclose(f);
    	}

    
}

/* ----------------------------------------------------------------------------------------- */



void afficher_listeEVote(GtkWidget *liste,char *fname){
    
  GtkCellRenderer *renderer;
    GtkTreeViewColumn *column;
    GtkTreeIter iter;
    GtkListStore *store;
    Lelectoral e ;
    char nb[20];

    FILE *f;
    store = NULL;
    store = gtk_tree_view_get_model(liste);


    if(store == NULL){
        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("ID",renderer,"text",EIDS,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Nom LE",renderer,"text",ENOMS,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Nombre Vote",renderer,"text",ENBVOTES,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);



    }
	store = gtk_list_store_new(ECOLUMNSS,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING);
    
   
    	f = fopen(fname,"r");
	if(f == NULL){
        	return;
    	}
	else{
        	while(fscanf(f,"%s %s %s %s %s %s %s %s %s %s %s %s %d %d/%d/%d\n",e.id,e.nom,e.orientation,e.nomCT,e.cinT,e.num_tel,e.tab_cand[0].cin,e.tab_cand[0].genre,e.tab_cand[1].cin,e.tab_cand[1].genre,e.tab_cand[2].cin,e.tab_cand[2].genre,&(e.nbrVote),&(e.d.j),&(e.d.m),&(e.d.a))!=EOF){
			sprintf(nb,"%d",e.nbrVote);
          		
			gtk_list_store_append(store,&iter);
            		gtk_list_store_set(store,&iter,EIDS,e.id,ENOMS,e.nom,ENBVOTES,nb,-1);
            		
        	}
		gtk_tree_view_set_model(GTK_TREE_VIEW(liste),GTK_TREE_MODEL(store));
		g_object_unref(store);
        	fclose(f);
    	}

    
}

/* ----------------------------------------------------------------------------------------- */

int trierLE(char *fname){
	Lelectoral e;
	Lelectoral data[1000];
    	FILE *f;

	int count = 0; 
   	f = fopen(fname,"r");

    while(fscanf(f,"%s %s %s %s %s %s %s %s %s %s %s %s %d %d/%d/%d\n",e.id,e.nom,e.orientation,e.nomCT,e.cinT,e.num_tel,e.tab_cand[0].cin,e.tab_cand[0].genre,e.tab_cand[1].cin,e.tab_cand[1].genre,e.tab_cand[2].cin,e.tab_cand[2].genre,&(e.nbrVote),&(e.d.j),&(e.d.m),&(e.d.a))!=EOF){
     
	    data[count] = e ;
		count++ ; 
	
    }
    fclose(f);

	int i,j;
	Lelectoral c;
	for(i=0;i<count-1;i++){
	    for(j=i+1;j<count;j++){
		if ( data[i].nbrVote < data[j].nbrVote ) {
		    c = data[i];
		    data[i] = data[j];
		    data[j] = c;
			}
		}
	}

	FILE *g ;
	g = fopen("triLE.txt","a");
	if(g != NULL){
		int k = 0 ;
		while(k < count){
			fprintf(g,"%s %s %s %s %s %s %s %s %s %s %s %s %d %d/%d/%d\n",data[k].id,data[k].nom,data[k].orientation,data[k].nomCT,data[k].cinT,data[k].num_tel,data[k].tab_cand[0].cin,data[k].tab_cand[0].genre,data[k].tab_cand[1].cin,data[k].tab_cand[1].genre,data[k].tab_cand[2].cin,data[k].tab_cand[2].genre,data[k].nbrVote,data[k].d.j,data[k].d.m,data[k].d.a);	
			k ++ ; 		
		}
	}
	fclose(g);	

}

int verifNum(char c[]){
    if(strlen(c) != 8){
        return 0;
    }
    else{
        int i,x;
        for(i=0;i<8;i++){
            x = c[i];
            if(x>57 || x<48){
                return 0;
            }
        }
	return 1;
    }
}


void rechercher_NomLE(char nom[]){
	Lelectoral e;
	FILE *f , *g;
	f = fopen("listeE.txt","r");
	g = fopen("listeNom.txt","a");
	if(f != NULL && g != NULL){
	    	while(fscanf(f,"%s %s %s %s %s %s %s %s %s %s %s %s %d %d/%d/%d\n",e.id,e.nom,e.orientation,e.nomCT,e.cinT,e.num_tel,e.tab_cand[0].cin,e.tab_cand[0].genre,e.tab_cand[1].cin,e.tab_cand[1].genre,e.tab_cand[2].cin,e.tab_cand[2].genre,&(e.nbrVote),&(e.d.j),&(e.d.m),&(e.d.a))!=EOF){
			if(strcmp(e.nom,nom) == 0){
	       		     fprintf(g,"%s %s %s %s %s %s %s %s %s %s %s %s %d %d/%d/%d\n",e.id,e.nom,e.orientation,e.nomCT,e.cinT,e.num_tel,e.tab_cand[0].cin,e.tab_cand[0].genre,e.tab_cand[1].cin,e.tab_cand[1].genre,e.tab_cand[2].cin,e.tab_cand[2].genre,e.nbrVote,e.d.j,e.d.m,e.d.a);
			}
	    	}
	}
	    fclose(f);
	fclose(g);
}

/* -------------------------------------------------- RECLAMATION ---------------------------------------------------- */
enum 
{
	EIDREC,
	ETYPEREC,
	EIDLREC,
	ENUMBREC,
	EDESCREC,
	EIDOBSREC,
	EDATEREC,
	ECOLUMNSREC,
};

void ajouter_reclamation(reclamation r,char *fname){
	FILE *f;
	f = fopen(fname,"a");
	if(f!= NULL){
		fprintf(f,"%d %s %d %d %s %s %d/%d/%d\n",r.idR,r.type,r.idL,r.numB,r.desc,r.idObs,r.d.j,r.d.m,r.d.a);
	}
	fclose(f);
}


void supprimer_reclamation(int id ,char *fname){
    reclamation r;
    FILE *f;
    FILE *g;
    f = fopen(fname,"r");
    g = fopen("tmp.txt","a");
    while(fscanf(f,"%d %s %d %d %s %s %d/%d/%d\n",&(r.idR),r.type,&(r.idL),&(r.numB),r.desc,r.idObs,&(r.d.j),&(r.d.m),&(r.d.a) ) != EOF){
        if(r.idR != id){
            fprintf(g,"%d %s %d %d %s %s %d/%d/%d\n",r.idR,r.type,r.idL,r.numB,r.desc,r.idObs,r.d.j,r.d.m,r.d.a);
        }
    }
    fclose(f);
    fclose(g);
    remove(fname);
    rename("tmp.txt",fname);
}
void modifier_reclamation(reclamation rec,char *fname){
	reclamation r;
    FILE *f;
    FILE *g;
    f = fopen(fname,"r");
    g = fopen("tmp.txt","a");
    while(fscanf(f,"%d %s %d %d %s %s %d/%d/%d\n",&(r.idR),r.type,&(r.idL),&(r.numB),r.desc,r.idObs,&(r.d.j),&(r.d.m),&(r.d.a) ) != EOF){
        if(r.idR == rec.idR){
            fprintf(g,"%d %s %d %d %s %s %d/%d/%d\n",rec.idR,rec.type,rec.idL,rec.numB,rec.desc,rec.idObs,rec.d.j,rec.d.m,rec.d.a);
        }
        else{
            fprintf(g,"%d %s %d %d %s %s %d/%d/%d\n",r.idR,r.type,r.idL,r.numB,r.desc,r.idObs,r.d.j,r.d.m,r.d.a);
        }
    }
    fclose(f);
    fclose(g);
    remove(fname);
    rename("tmp.txt",fname);
}


void afficher_reclamation(GtkWidget *liste){

    GtkCellRenderer *renderer;
    GtkTreeViewColumn *column;
    GtkTreeIter iter;
    GtkListStore *store;
    reclamation r ;

    FILE *f;
    store = NULL;
    store = gtk_tree_view_get_model(liste);


	char date[40];
	char text1[20],text2[20],text3[20];


    if(store == NULL){
        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("ID Rec",renderer,"text",EIDREC,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Type",renderer,"text",ETYPEREC,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("ID ListeE",renderer,"text",EIDLREC,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("N° Bureau",renderer,"text",ENUMBREC,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Description",renderer,"text",EDESCREC,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("ID Obser",renderer,"text",EIDOBSREC,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);


	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Date ",renderer,"text",EDATEREC,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);



    }
	store = gtk_list_store_new(ECOLUMNSREC,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING);
    
    
    	f = fopen("reclamation.txt","r");
	if(f == NULL){
        	return;
    	}
	else{
        	while(fscanf(f,"%d %s %d %d %s %s %d/%d/%d\n",&(r.idR),r.type,&(r.idL),&(r.numB),r.desc,r.idObs,&(r.d.j),&(r.d.m),&(r.d.a) ) != EOF){
			
			sprintf(date,"%d/%d/%d",r.d.j,r.d.m,r.d.a);
			sprintf(text1,"%d",r.idR);

			sprintf(text2,"%d",r.idL);
			sprintf(text3,"BV%d",r.numB);
	
			

			          		
			gtk_list_store_append(store,&iter);
            		gtk_list_store_set(store,&iter,EIDREC,text1,ETYPEREC,r.type,EIDLREC,text2,ENUMBREC,text3,EDESCREC,r.desc,EIDOBSREC,r.idObs,EDATEREC,date,-1);
            		
        	}
		gtk_tree_view_set_model(GTK_TREE_VIEW(liste),GTK_TREE_MODEL(store));
		g_object_unref(store);
        	fclose(f);
    	}


}




int rechercher_reclamation(int id){
	reclamation r ;
	FILE *f;
	f = fopen("reclamation.txt","r");

	if(f!= NULL){
        	while(fscanf(f,"%d %s %d %d %s %s %d/%d/%d\n",&(r.idR),r.type,&(r.idL),&(r.numB),r.desc,r.idObs,&(r.d.j),&(r.d.m),&(r.d.a) ) != EOF)
		{
			if(r.idR == id)
				return 1;
		}
    	}
    	fclose(f);
	return 0;
}

reclamation trouver_reclamation(int id){
	reclamation r ;
	FILE *f;
	f = fopen("reclamation.txt","r");

	if(f!= NULL){
        	while(fscanf(f,"%d %s %d %d %s %s %d/%d/%d\n",&(r.idR),r.type,&(r.idL),&(r.numB),r.desc,r.idObs,&(r.d.j),&(r.d.m),&(r.d.a) ) != EOF)
		{
			if(r.idR == id)
				return r;
		}
    	}
    	fclose(f);
	return;
}



/* -------------------------------------------------- BUREAU DE VOTE -------------------------------------------------- */

enum{
	EIDBV,
	EETABBV,
	ETYPEBV,
	ENBSALLEBV,
	EIRIEBV,
	EDELEGBV,
	ECODEPBV,
	EHORAIREOBV,
	EHORAIREFBV,
	EIDABBV,	
	ECOLUMNSBV,
};


/*---------------------------------------------------------------------------------*/


void ajouter_bureauV(bureauV b){
    FILE *f;
    f = fopen("bureauV.txt","a");
    if(f!= NULL){
        fprintf(f,"%s %s %s %d %s %s %d %d %d %d\n",b.id,b.etabl,b.typeE,b.nbS,b.Irie,b.deleg,b.codeP,b.HoraireO,b.HoraireF,b.idAgentB);
    }
    fclose(f);
}


void supprimer_bureauV(char id[]){
    bureauV b;
    FILE *f;
    FILE *g;
    f = fopen("bureauV.txt","r");
    g = fopen("tmp.txt","a");
    while(fscanf(f,"%s %s %s %d %s %s %d %d %d %d\n",b.id,b.etabl,b.typeE,&(b.nbS),b.Irie,b.deleg,&(b.codeP),&(b.HoraireO),&(b.HoraireF),&(b.idAgentB)) != EOF){
        if(strcmp(b.id,id) != 0){
            fprintf(g,"%s %s %s %d %s %s %d %d %d %d\n",b.id,b.etabl,b.typeE,b.nbS,b.Irie,b.deleg,b.codeP,b.HoraireO,b.HoraireF,b.idAgentB);
        }

    }
    fclose(f);
    fclose(g);
    remove("bureauV.txt");
    rename("tmp.txt","bureauV.txt");
}

/*--------------------------------------------------------------------------*/


void modifier_bureauV(bureauV bV){
 	bureauV b;
    FILE *f;
    FILE *g;
    f = fopen("bureauV.txt","r");
    g = fopen("tmp.txt","a");
    while(fscanf(f,"%s %s %s %d %s %s %d %d %d %d\n",b.id,b.etabl,b.typeE,&(b.nbS),b.Irie,b.deleg,&(b.codeP),&(b.HoraireO),&(b.HoraireF),&(b.idAgentB)) != EOF){
        if(strcmp(b.id,bV.id) == 0){
            fprintf(g,"%s %s %s %d %s %s %d %d %d %d\n",bV.id,bV.etabl,bV.typeE,bV.nbS,bV.Irie,bV.deleg,bV.codeP,bV.HoraireO,bV.HoraireF,bV.idAgentB);
        }
        else{
            fprintf(g,"%s %s %s %d %s %s %d %d %d %d\n",b.id,b.etabl,b.typeE,b.nbS,b.Irie,b.deleg,b.codeP,b.HoraireO,b.HoraireF,b.idAgentB);
        }
    }
    fclose(f);
    fclose(g);
    remove("bureauV.txt");
    rename("tmp.txt","bureauV.txt");

}


/*--------------------------------------------------------------------------*/
void afficher_bureauV(GtkWidget *liste){
	GtkCellRenderer *renderer;
	GtkTreeViewColumn *column;
	GtkTreeIter iter;
	GtkListStore *store;
	bureauV b ;


    char nbS[40];
    char codeP[20];
char horaireO[20];
char horaireF[20];
char idAB[20];

    FILE *f;
    store = NULL;
    store = gtk_tree_view_get_model(liste);


    if(store == NULL){
        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("ID",renderer,"text",EIDBV,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Etablissement",renderer,"text",EETABBV,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Type d'Etablissement",renderer,"text",ETYPEBV,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Nombre de salle",renderer,"text",ENBSALLEBV,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("IRIE",renderer,"text",EIRIEBV,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Délegation",renderer,"text",EDELEGBV,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Code Postal",renderer,"text",ECODEPBV,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Horaire d'Ouverture",renderer,"text",EHORAIREOBV,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Horaire du Fermeture",renderer,"text",EHORAIREFBV,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("ID Agent Bureau",renderer,"text",EIDABBV,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);


    }
	store = gtk_list_store_new(ECOLUMNSBV,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING);


    
    	f = fopen("bureauV.txt","r");
	if(f == NULL){
        	return;
    	}
	else{
        	while(fscanf(f,"%s %s %s %d %s %s %d %d %d %d\n",b.id,b.etabl,b.typeE,&(b.nbS),b.Irie,b.deleg,&(b.codeP),&(b.HoraireO),&(b.HoraireF),&(b.idAgentB)) != EOF){
			sprintf(nbS,"%d",b.nbS);
			sprintf(codeP,"%d",b.codeP);
			sprintf(horaireO,"%d",b.HoraireO);
			sprintf(horaireF,"%d",b.HoraireF);
			sprintf(idAB,"%d",b.idAgentB);

			          		
			gtk_list_store_append(store,&iter);
            		gtk_list_store_set(store,&iter,EIDBV,b.id,EETABBV,b.etabl,ETYPEBV,b.typeE,ENBSALLEBV,nbS,EIRIEBV,b.Irie,EDELEGBV,b.deleg,ECODEPBV,codeP,EHORAIREOBV,horaireO,EHORAIREFBV,horaireF,EIDABBV,idAB,-1);
            		
        	}
		gtk_tree_view_set_model(GTK_TREE_VIEW(liste),GTK_TREE_MODEL(store));
		g_object_unref(store);
        	fclose(f);
    	}

}
/*-----------------------------------------------------*/

int rechercher_bureauV(char id[]){

	bureauV b ;
	FILE *f;
	f = fopen("bureauV.txt","r");

	if(f!= NULL){
        	while(fscanf(f,"%s %s %s %d %s %s %d %d %d %d\n",b.id,b.etabl,b.typeE,&(b.nbS),b.Irie,b.deleg,&(b.codeP),&(b.HoraireO),&(b.HoraireF),&(b.idAgentB)) != EOF)
		{
			if(strcmp(b.id,id) == 0)
				return 1;
		}
    	}
    	fclose(f);
	return 0;
}

bureauV trouverBureauV(char id[]){

	bureauV b ;
	FILE *f;
	f = fopen("bureauV.txt","r");

	if(f!= NULL){
        	while(fscanf(f,"%s %s %s %d %s %s %d %d %d %d\n",b.id,b.etabl,b.typeE,&(b.nbS),b.Irie,b.deleg,&(b.codeP),&(b.HoraireO),&(b.HoraireF),&(b.idAgentB)) != EOF)
		{
			if(strcmp(b.id,id) == 0)
				return b;
		}
    	}
    	fclose(f);
	return;
}


/* ------------------------------------------------------------------------------------------------------------------------------- */

enum{
	EIDOBS,
	ENOMOBS,
	EPRENOMOBS,
	EPROFESSIONOBS,
	EGENREOBS,
	ENATIONOBS,
	ENBVOTEOBS,
	ECOLUMNSOBS,
};


void ajouter_observateur(observateur o){

	FILE *f;
	f = fopen("observateur.txt","a");
	if(f!= NULL){
        	fprintf(f,"%d %s %s %s %s %s %d\n",o.id,o.nom,o.prenom,o.profession,o.nationality,o.genre,o.numB);
		
    	}
    	fclose(f);
}

void supprimer_observateur(int id){
	observateur o;
	FILE *f, *g;
	f=fopen("observateur.txt","r");
	g=fopen("temp.txt","a");
	if(f!=NULL && g!=NULL){
		while(fscanf(f,"%d %s %s %s %s %s %d\n",&(o.id),o.nom,o.prenom,o.profession,o.nationality,o.genre,&(o.numB))!=EOF)
		{
			if(o.id != id)
				fprintf(g,"%d %s %s %s %s %s %d\n",o.id,o.nom,o.prenom,o.profession,o.nationality,o.genre,o.numB);
		}
		
		fclose(f);
		fclose(g);
		
		remove("observateur.txt");
		rename("temp.txt","observateur.txt");
	}
}

void modifier_observateur(observateur o){
	observateur y;
	FILE *f, *g;
	f=fopen("observateur.txt","r");
	g=fopen("temp.txt","a");
	if(f!=NULL&&g!=NULL){
		while(fscanf(f,"%d %s %s %s %s %s %d\n",&(y.id),y.nom,y.prenom,y.profession,y.nationality,y.genre,&(y.numB))!=EOF)
		{
			if(o.id == y.id)
				fprintf(g,"%d %s %s %s %s %s %d\n",o.id,o.nom,o.prenom,o.profession,o.nationality,o.genre,o.numB);
			else
				fprintf(g,"%d %s %s %s %s %s %d\n",y.id,y.nom,y.prenom,y.profession,y.nationality,y.genre,y.numB);
		}
	
		fclose(f);
		fclose(g);
		
		remove("observateur.txt");
		rename("temp.txt","observateur.txt");
	}
}

void afficher_observateur(GtkWidget *liste,char *fname){
    GtkCellRenderer *renderer;
    GtkTreeViewColumn *column;
    GtkTreeIter iter;
    GtkListStore *store;
    observateur y ;
    char ido[20];
    char numBV[40];
    char name[50];
    FILE *f;
    store = NULL;
    store = gtk_tree_view_get_model(liste);


    if(store == NULL){
        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("ID",renderer,"text",EIDOBS,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Nom",renderer,"text",ENOMOBS,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	        renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Prénom",renderer,"text",EPRENOMOBS,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Profession",renderer,"text",EPROFESSIONOBS,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Nationalité",renderer,"text",ENATIONOBS,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("Genre",renderer,"text",EGENREOBS,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);

	renderer = gtk_cell_renderer_text_new();
        column = gtk_tree_view_column_new_with_attributes("NumB",renderer,"text",ENBVOTEOBS,NULL);
        column = gtk_tree_view_append_column(GTK_TREE_VIEW(liste),column);


    }
	store = gtk_list_store_new(ECOLUMNSOBS,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING);
    
    
    	f = fopen(fname,"r");
	if(f == NULL){
        	return;
    	}
	else{
        	while(fscanf(f,"%d %s %s %s %s %s %d\n",&(y.id),y.nom,y.prenom,y.profession,y.nationality,y.genre,&(y.numB))!=EOF){
			sprintf(ido,"%d",y.id);
			sprintf(numBV,"%d",y.numB);

			          		
			gtk_list_store_append(store,&iter);
            		gtk_list_store_set(store,&iter,EIDOBS,ido,ENOMOBS,y.nom,EPRENOMOBS,y.prenom,EPROFESSIONOBS,y.profession,ENATIONOBS,y.nationality,EGENREOBS,y.genre,ENBVOTEOBS,numBV,-1);
            		
        	}
		gtk_tree_view_set_model(GTK_TREE_VIEW(liste),GTK_TREE_MODEL(store));
		g_object_unref(store);
        	fclose(f);
    	}
    
}

int rechercher_observateur(int id){
	observateur y ;	
	FILE *f;
	f = fopen("observateur.txt","r");
	while(fscanf(f,"%d %s %s %s %s %s %d\n",&(y.id),y.nom,y.prenom,y.profession,y.nationality,y.genre,&(y.numB))!=EOF)
		{
			if(y.id == id){
				return 1 ; 
			}

		}
	return 0;
	
}

observateur observateur_data(int id){
	observateur y ;	
	FILE *f;
	f = fopen("observateur.txt","r");
	while(fscanf(f,"%d %s %s %s %s %s %d\n",&(y.id),y.nom,y.prenom,y.profession,y.nationality,y.genre,&(y.numB))!=EOF)
		{
			if(y.id == id){
				return y ; 
			}

		}
	return;
}

void trierObs(){

	observateur o;
	observateur data[1000];
    	FILE *f;

	int count = 0; 
   	f = fopen("observateur.txt","r");

    	while(fscanf(f,"%d %s %s %s %s %s %d\n",&(o.id),o.nom,o.prenom,o.profession,o.nationality,o.genre,&(o.numB))!=EOF){
	    data[count] = o ;
		count++ ; 
    	}
    	fclose(f);

	int i,j;
	observateur temp;

	for (i = 0; i < count; i++) {
	    for (j = 0; j < count; j++){
	      if (strcmp(data[i].nom, data[j].nom) < 0)
		{
		  temp = data[i];
		  data[i] = data[j];
		  data[j] = temp;
		}
	  }
	}

	FILE *g;
	g = fopen("triobs.txt","a");
	for (i = 0; i < count; i++) {
		fprintf(g,"%d %s %s %s %s %s %d\n",data[i].id,data[i].nom,data[i].prenom,data[i].profession,data[i].nationality,data[i].genre,data[i].numB);
	}

	fclose(g);
}

int nbTotal(char *filename){
	FILE *f ; 
	observateur o; 
	int count = 0 ; 
	f = fopen("observateur.txt","r");
	while(fscanf(f,"%d %s %s %s %s %s %d\n",&(o.id),o.nom,o.prenom,o.profession,o.nationality,o.genre,&(o.numB))!=EOF){
		count = count + 1 ; 
	
	}

	fclose(f);
	return count ; 
}

void filtrerObs(char nom[]){
	FILE *f,*g ; 
	observateur o; 
	int count = 0 ; 
	f = fopen("observateur.txt","r");
	g = fopen("obsnom.txt","a");
	while(fscanf(f,"%d %s %s %s %s %s %d\n",&(o.id),o.nom,o.prenom,o.profession,o.nationality,o.genre,&(o.numB))!=EOF){
		if(strcmp(nom,o.nom) == 0 ){
			fprintf(g,"%d %s %s %s %s %s %d\n",o.id,o.nom,o.prenom,o.profession,o.nationality,o.genre,o.numB);
		}
	
	}

	fclose(f);
	fclose(g);
}

